{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","profile_info","container__header_img","header_img","avatarBlock","imgContainer","userPhoto","descripsionBlock","uploadBtnBlock","status","contact","item","postsBlock","posts","newPostBlock","newPostField","field","addPostBtnBlock","addPostBtn","lineBlock","line","imgPost","postWithoutImg","message","likesCount","content","Post","_ref","react_default","a","createElement","className","s","alt","src","userName","like","AddPostFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","name","cols","rows","placeholder","MyPosts","addPost","postElements","map","p","MyPosts_Post_Post","key","id","values","newPostText","connect","state","profilePage","actions","addPostActionCreator","ProfileStatusWithHooks","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","_useState4","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","enableReinitialize","profile","error","style","formSummaryError","validate","required","Input","type","keys","contacts","concat","ProfileData","_ref2","isOwner","goToEditMode","onClick","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","photos","small","fullName","ProfileInfo_ProfileStatusWithHooks","uploadBtn","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","Profile","Profile_ProfileInfo_ProfileInfo","MyPostsContainer","ProfileContainer","userId","this","router","params","autorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","components_Profile_Profile","assign","React","Component","compose","auth","isAuth","location","useLocation","navigate","useNavigate","useParams"],"mappings":"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","file":"static/js/2.36772152.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_info\":\"ProfileInfo_profile_info__3Qi2m\",\"container__header_img\":\"ProfileInfo_container__header_img__1VIIx\",\"header_img\":\"ProfileInfo_header_img__11uMi\",\"avatarBlock\":\"ProfileInfo_avatarBlock__1UCH3\",\"imgContainer\":\"ProfileInfo_imgContainer__13PcN\",\"userPhoto\":\"ProfileInfo_userPhoto__NcrxR\",\"descripsionBlock\":\"ProfileInfo_descripsionBlock__2fJKe\",\"uploadBtnBlock\":\"ProfileInfo_uploadBtnBlock__7n263\",\"status\":\"ProfileInfo_status__1MgJJ\",\"contact\":\"ProfileInfo_contact__2ZALi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__np-ed\",\"postsBlock\":\"MyPosts_postsBlock__3Upe3\",\"posts\":\"MyPosts_posts__3bm9y\",\"newPostBlock\":\"MyPosts_newPostBlock__34IJk\",\"newPostField\":\"MyPosts_newPostField__1zUsE\",\"field\":\"MyPosts_field__36r9_\",\"addPostBtnBlock\":\"MyPosts_addPostBtnBlock__1GOmg\",\"addPostBtn\":\"MyPosts_addPostBtn__2iLnY\",\"lineBlock\":\"MyPosts_lineBlock__14fCQ\",\"line\":\"MyPosts_line__etqQk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1F-pW\",\"imgPost\":\"Post_imgPost__2xPhi\",\"postWithoutImg\":\"Post_postWithoutImg__Ci-gC\",\"message\":\"Post_message__26GU3\",\"likesCount\":\"Post_likesCount__2q9UB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1zEK7\",\"line\":\"Profile_line__wtlEP\"};","import React, { FC } from \"react\";\r\nimport s from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/user.png';\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post: FC<PropsType> = ({ message, likesCount}) => {\r\n  return <div className={s.item}>\r\n    <div className={s.imgPost}>\r\n      <img alt='userAvatar' src={ userPhoto} className={s.userPhoto} />\r\n    </div>\r\n    <div className={s.postWithoutImg}>\r\n      <div className={s.userName}>\r\n        <p><strong>{}</strong> add post:</p>\r\n      </div>\r\n      <div className={s.message}>\r\n        {message}\r\n      </div>\r\n      <div className={s.likesCount}>\r\n        <span className={s.like}> Liked {likesCount}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Post;","import React, { FC } from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { Field } from \"redux-form\";\r\nimport { PostType, ProfileType } from \"../../../types/types\";\r\nimport { LoginFormValuesType, Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MapPropsType & DispatchPropsType> = ({posts, addPost}) => {\r\n    let postElements =\r\n        posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        addPost(values.newPostText);\r\n    };\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            {}\r\n            <div >\r\n                <AddPostFormRedux onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={s.lineBlock}>\r\n                <div className={s.line}></div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype PropsType = {\r\n\r\n}\r\ntype AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = Extract<keyof AddPostFormValuesType, string>\r\n\r\nconst AddPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.newPostField}>\r\n                <Field component={Textarea} name={'newPostText'}\r\n                cols='74' rows='4' \r\n                placeholder={`What's new?`}\r\n                className={s.field} />\r\n            </div>\r\n            <div className={s.addPostBtnBlock}>\r\n                <button className={s.addPostBtn}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<AddPostFormValuesType, PropsType>({form: 'profileAddNewPostForm' })(AddPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from 'redux';\r\nimport { actions } from \"../../../redux/profile-reducer\";\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from \"./MyPosts\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport default \r\n    connect<MapPropsType, DispatchPropsType, {}, AppStateType>( mapStateToProps, {\r\n        addPost: actions.addPostActionCreator} )\r\n(MyPosts)","import React, { ChangeEvent, FC, useEffect, useState } from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setStatus?: () => void | null\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.setStatus] );\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true);\r\n    } \r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    } \r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={ activeEditMode }>{props.status || '------'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}  autoFocus={true} onBlur={ deactivateEditMode }\r\n                    value={status} ></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, { FC } from \"react\";\r\nimport { Field, InjectedFormProps } from \"redux-form\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport s from './ProfileInfo.module.css';\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\nimport { required } from \"../../../utils/validators/validators\";\r\nimport { GetStringKeys, Input, Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { ProfileType } from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<PropsType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name:</b> <Field placeholder=\"Full name\" name={'fullName'}\r\n                validate={[required]}\r\n                component={Input} />\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> <Field placeholder=\"Looking for a job\" name={'lookingForAJob'}\r\n                component={Input}\r\n                type={\"checkbox\"} />\r\n        </div>\r\n        <div>\r\n            <b>My proffesional skills:</b>\r\n            <Field placeholder=\"My proffesional skills\" name={'lookingForAJobDescription'}\r\n                validate={[required]}\r\n                component={Textarea} />\r\n        </div>\r\n        <div>\r\n            <b>About me:</b>\r\n            <Field placeholder=\"About me\" name={'aboutMe'}\r\n                validate={[required]}\r\n                component={Textarea} />\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: <Field placeholder={key} name={`contacts.${key}`}\r\n                        component={Input} /></b>\r\n                </div>\r\n            })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile', enableReinitialize: true })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { ChangeEvent, FC, useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataFormReduxForm from './ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            });\r\n    }\r\n\r\n    return <div className='profile_info'>\r\n        <div className={s.container__header_img}>\r\n            <img className={s.header_img} alt='content__img' src='https://static.insales-cdn.com/files/1/1718/14722742/original/mirissa_3f55c1430faff61080ededda43638142.jpg'></img>\r\n        </div>\r\n\r\n        <div className={s.avatarBlock}>\r\n            <div className={s.imgContainer}>\r\n                <img alt='userAvatar' src={profile.photos.small || userPhoto} className={s.userPhoto} />\r\n                <h3>{profile.fullName}</h3>\r\n                <div className={s.status}>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}  /* {props.profile.aboutMe} */ />\r\n                </div>\r\n            </div>\r\n            <div className={s.uploadBtnBlock}>\r\n                {isOwner && <input type={'file'} className={s.uploadBtn} onChange={onMainPhotoSelected} />}\r\n            </div>\r\n        </div>\r\n\r\n        <div className={s.descripsionBlock}>\r\n            {editMode\r\n                ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? 'ищу' : 'не ищу'}\r\n        </div>\r\n        {profile.lookingForAJobDescription &&\r\n            <div>\r\n                <b>My proffesional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me:</b> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object\r\n                .keys(profile.contacts)\r\n                .map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contact}><b>{contactTitle}:</b> {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React, { FC } from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return <div className={s.content}>\r\n        <ProfileInfo \r\n            isOwner={props.isOwner} \r\n            savePhoto={props.savePhoto} \r\n            profile={props.profile} \r\n            status={props.status} \r\n            saveProfile={props.saveProfile}\r\n            updateStatus={props.updateStatus} />\r\n        <div className={s.line}></div>\r\n        { props.profile!=null && <MyPostsContainer />}\r\n    </div> \r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    useParams,\r\n} from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    } \r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n            isOwner={!this.props.router.params.userId}\r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updateStatus={this.props.updateStatus}\r\n            savePhoto={this.props.savePhoto} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}