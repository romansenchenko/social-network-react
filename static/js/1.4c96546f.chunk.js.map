{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","DialogItem","props","path","id","react_default","a","createElement","className","s","dialog","react_router_dom","to","name","Message","message","maxLenth50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","messagesElements","map","m","Dialogs_Message_Message","key","dialogsElements","d","Dialogs_DialogItem_DialogItem","Dialogs_AddMessageForm_AddMessageForm","values","sendMessage","newMessageBody","compose","connect","Object","objectSpread","actions"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,iJCgBHC,EARmB,SAACC,GAC/B,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEV,QACtCM,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAIT,GAAOD,EAAMW,QCFhBC,EAJgB,SAACZ,GAC5B,OAAOG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEM,SAAlB,IAA6Bb,EAAMa,QAAnC,uCCALC,EAAaC,YAAiB,IAoBrBC,cAAoC,CAAEC,KAAM,yBAA5CD,CAdR,SAAChB,GACJ,OACIG,EAAAC,EAAAC,cAAA,QAAMa,SAAUlB,EAAMmB,cAClBhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,UAAWC,IACdC,SAAY,CAACC,IAAUV,GACvBH,KAAK,iBACLc,YAAY,uGAEpBtB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,4ECgBFqB,EAxBmB,SAAC1B,GAE/B,IAAI2B,EAAQ3B,EAAM4B,YACdC,EAAmBF,EAAM7B,SAASgC,IAAI,SAAAC,GAAC,OAAI5B,EAAAC,EAAAC,cAAC2B,EAAD,CAASC,IAAKF,EAAE7B,GAAIW,QAASkB,EAAEjC,aAC1EoC,EAAkBP,EAAMhC,QAAQmC,IAAI,SAAAK,GAAC,OAAIhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAYH,IAAKE,EAAEjC,GAAIS,KAAMwB,EAAExB,KAAMT,GAAIiC,EAAEjC,OAMxF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEZ,SACdQ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEX,cACbsC,GAEL/B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,UACdK,EAAAC,EAAAC,cAAA,eAAOwB,EAAP,MAEJ1B,EAAAC,EAAAC,cAACgC,EAAD,CAAgBnB,SAZJ,SAACoB,GACjBtC,EAAMuC,YAAYD,EAAOE,qBCTlBC,sBACXC,YAPkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,cAKhBe,OAAAC,EAAA,EAAAD,CAAA,GAAuBE,MADnBJ,CAEbf","file":"static/js/1.4c96546f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__AGpWa\",\"dialogsItems\":\"Dialogs_dialogsItems__kmaao\",\"active\":\"Dialogs_active__i_Nru\",\"messages\":\"Dialogs_messages__3GH8L\"};","import React, { FC } from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype PropsType ={\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <Link to={path}>{props.name}</Link>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React, { FC } from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType ={\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return <div className={s.message}> {props.message} </div>\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { Field } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { NewMessageFormType as NewMessageFormValuesType } from \"../Dialogs\";\r\n\r\n\r\nconst maxLenth50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n     = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} \r\n                    validate = {[required, maxLenth50]}\r\n                    name='newMessageBody' \r\n                    placeholder='Введите сообщение' />\r\n            </div>\r\n            <div><button>Отправить</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({ form: 'dialogsAddMessageForm' })(AddMessageForm);\r\n","import React, { FC } from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: FC<OwnPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.messages} />);\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} />);\r\n    \r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElements} </div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect( mapStateToProps, {...actions} ),\r\n)(Dialogs);"],"sourceRoot":""}